(fun (insert bst len val)
    (let ((i 0))
        (loop
            (if (>= i len)
                (break false)
                (let ((get (tget bst i)))
                    (if (isbool get)
                        (block
                            (tset bst i val)
                            (break true)
                        )
                        (if (= get val)
                            (break true)
                            (if (< val get)
                                (set! i (+ (* i 2) 1))
                                (set! i (+ (* i 2) 2))
                            )
                        )
                    )
                )
            )
        )
    )
)

(fun (lookup bst len val)
    (let ((i 0))
        (loop
            (if (>= i len)
                (break false)
                (let ((get (tget bst i)))
                    (if (isbool get)
                        (break false)
                        (if (= val get)
                            (break true)
                            (if (< val get)
                                (set! i (+ (* i 2) 1))
                                (set! i (+ (* i 2) 2))
                            )
                        )
                    )
                )
            )
        )
    )
)

(fun (newbst len)
    (tinit len false)
)

(let ((len 20) (tree (newbst len)))
    (block
        (insert tree len 10)
        (insert tree len 13)
        (insert tree len 4)
        (print tree)
        (insert tree len 6)
        (insert tree len 12)
        (insert tree len 4)
        (insert tree len -3)
        (print tree)
        (print (lookup tree len 3))
        (print (lookup tree len 10))
        (print (lookup tree len 12))
        (print (lookup tree len -3))
        tree
    )
)